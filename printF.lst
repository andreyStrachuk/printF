     1                                  section .data
     2 00000000 25644920616D206865-     Msg:  db "%dI am here%s!dgdfgsdf %s %c", 0xA, 0
     2 00000009 726525732164676466-
     2 00000012 677364662025732025-
     2 0000001B 630A00             
     3                                  
     4 0000001E 736F6D657468696E67-     str:  db "something to print", 0
     4 00000027 20746F207072696E74-
     4 00000030 00                 
     5 00000031 736F6D657468696E67-     str1:  db "something to print 2", 0
     5 0000003A 20746F207072696E74-
     5 00000043 203200             
     6                                  
     7 00000046 00<rept>                tmpBuff  times 40 db 0
     8                                  
     9 0000006E 303132333435363738-     ConvertTable	db "0123456789ABCDEF"
     9 00000077 39414243444546     
    10                                  
    11                                  section .bss
    12                                  
    13 00000000 <res 00001000>          buf     resb 4096
    14                                  
    15                                  section .text
    16                                  
    17                                  global _start
    18                                  
    19                                  _start:
    20 00000000 BF4C060000                      mov rdi, 1612
    21 00000005 48BE-                           mov rsi, str
    21 00000007 [1E00000000000000] 
    22 0000000F 48BA-                           mov rdx, str1
    22 00000011 [3100000000000000] 
    23 00000019 B957000000                      mov rcx, 'W'
    24                                  
    25 0000001E 4151                            push r9
    26 00000020 4150                            push r8
    27 00000022 51                              push rcx
    28 00000023 52                              push rdx
    29 00000024 56                              push rsi
    30 00000025 57                              push rdi
    31                                  
    32 00000026 48B8-                           mov rax, buf
    32 00000028 [0000000000000000] 
    33 00000030 48BB-                           mov rbx, Msg
    33 00000032 [0000000000000000] 
    34 0000003A E883000000                      call cpy
    35                                  
    36 0000003F 5F                              pop rdi
    37 00000040 5E                              pop rsi
    38 00000041 5A                              pop rdx
    39 00000042 59                              pop rcx
    40 00000043 4158                            pop r8
    41 00000045 4159                            pop r9
    42                                  
    43 00000047 48BE-                           mov rsi, buf
    43 00000049 [0000000000000000] 
    44 00000051 E855000000                      call StrLen
    45 00000056 89CA                            mov edx, ecx
    46                                  
    47 00000058 B804000000                      mov eax, 0x04
    48 0000005D BB01000000                      mov ebx, 1
    49 00000062 B9[00000000]                    mov ecx, buf
    50 00000067 CD80                            int 0x80
    51                                  
    52 00000069 B801000000                      mov eax, 0x01
    53 0000006E 31DB                            xor ebx, ebx
    54 00000070 CD80                            int 0x80
    55                                  
    56                                  
    57                                  ;--------------------------------------------
    58                                  ; Converts an integer value to a null-terminated string using
    59                                  ; the specified base and stores the result in the array given by str parameter.
    60                                  ;
    61                                  ; Entry: 	RSI - addr of the string
    62                                  ;			RBX - number
    63                                  ;			RCX - base of numeric system
    64                                  ;
    65                                  ; Exit:		RSI - addr of the string
    66                                  ;
    67                                  ; Destr:	RAX, RBX, RDX
    68                                  ;--------------------------------------------
    69                                  itoa:
    70 00000072 4889D8                              mov rax, rbx          
    71                                  
    72                                  .count:
    73 00000075 4831D2                              xor rdx, rdx
    74 00000078 48F7F1                              div rcx
    75                                  
    76 0000007B 4883F800                            cmp rax, 0
    77 0000007F 7405                                je .MainFunc
    78 00000081 48FFC6                              inc rsi
    79 00000084 EBEF                                jmp .count
    80                                  
    81                                  .MainFunc:
    82 00000086 4889D8                              mov rax, rbx
    83                                  
    84 00000089 C6460100                            mov byte [rsi + 1], 0
    85                                  
    86                                  .itoaloop:
    87 0000008D 4831D2                              xor rdx, rdx
    88 00000090 48F7F1                              div rcx
    89                                  
    90 00000093 4889D3                              mov rbx, rdx
    91 00000096 8A93[6E000000]                      mov dl, byte [rbx + ConvertTable]   
    92                                  
    93 0000009C 8816                                mov byte [rsi], dl     
    94 0000009E 48FFCE                              dec rsi
    95                                  
    96 000000A1 4883F800                            cmp rax, 0
    97 000000A5 75E6                                jne .itoaloop
    98                                  
    99 000000A7 48FFC6                              inc rsi
   100                                  
   101 000000AA C3                      	    ret
   102                                  
   103                                  ;---------------------------------
   104                                  ; This function calculates	the length of string which terminates by '\0' symbol
   105                                  ; Entry: RSI - addres of string
   106                                  ;
   107                                  ; Exit: RCX	- length
   108                                  ; Destr: RCX
   109                                  ;---------------------------------
   110                                  StrLen:
   111 000000AB 56                                      push rsi
   112 000000AC 4831C9                                  xor rcx, rcx
   113 000000AF 48FFC9                                  dec rcx
   114 000000B2 48FFCE                                  dec rsi
   115                                  
   116 000000B5 48FFC6                  .cycle_len:     inc rsi
   117 000000B8 48FFC1                                  inc rcx
   118                                  
   119 000000BB 803E00                                  cmp byte [rsi], 0
   120                                  
   121 000000BE 75F5                                    jne .cycle_len
   122                                  
   123 000000C0 5E                                      pop rsi
   124                                  
   125 000000C1 C3                                      ret
   126                                  
   127                                  
   128                                  ;-------------------------------------------------
   129                                  ; This function forms string which is to be printed
   130                                  ; 
   131                                  ; RBX - string literal, RAX - buffer to print
   132                                  ; 
   133                                  ; Destr: RCX, RDX
   134                                  ;-------------------------------------------------
   135                                  cpy:
   136 000000C2 55                                      push rbp
   137 000000C3 4889E5                                  mov rbp, rsp
   138                                  
   139 000000C6 4831C9                                  xor rcx, rcx
   140 000000C9 B910000000                              mov rcx, 16
   141                                  
   142 000000CE 4831D2                  cycle:          xor rdx, rdx
   143 000000D1 803B00                                  cmp byte [rbx], 0
   144 000000D4 743C                                    je exit
   145                                  
   146 000000D6 803B25                                  cmp byte [rbx], '%'
   147 000000D9 7402                                    je p_hand
   148                                  
   149 000000DB 7527                                    jne ord_h       
   150                                  
   151 000000DD 807B0163                p_hand:         cmp byte [rbx + 1], 'c'
   152                                  
   153 000000E1 7413                                    je c_hand
   154                                  
   155 000000E3 807B0164                                cmp byte [rbx + 1], 'd'
   156                                  
   157 000000E7 7414                                    je d_hand
   158                                  
   159 000000E9 807B0173                                cmp byte [rbx + 1], 's'
   160 000000ED 7515                                    jne ord_h
   161                                  
   162 000000EF E87A000000                              call ps_hand
   163                                  
   164 000000F4 EBD8                                    jmp cycle
   165                                  
   166                                  
   167 000000F6 E85D000000              c_hand:         call pc_hand
   168                                  
   169 000000FB EBD1                                    jmp cycle
   170                                  
   171 000000FD E815000000              d_hand:         call pd_hand
   172                                  
   173 00000102 EBCA                                    jmp cycle
   174                                  
   175 00000104 488B13                  ord_h:          mov rdx, [rbx]
   176 00000107 488910                                  mov [rax], rdx
   177                                  
   178 0000010A 48FFC0                                  inc rax
   179 0000010D 48FFC3                                  inc rbx
   180                                  
   181 00000110 EBBC                                    jmp cycle
   182                                  
   183                                  exit:
   184 00000112 C60300                                  mov byte [rbx], 0
   185                                  
   186 00000115 5D                                      pop rbp
   187                                  
   188 00000116 C3                                      ret
   189                                  
   190                                  ;--------------------------------------------
   191                                  ; This function stores %d value in the buffer
   192                                  ;
   193                                  ; Entry: RAX - buffer, RBP - stack base, RCX - shift in stack
   194                                  ; RBX - literal, 
   195                                  ;
   196                                  ; Destr: DX
   197                                  ;--------------------------------------------
   198                                  pd_hand:
   199 00000117 4831D2                                  xor rdx, rdx
   200                                  
   201 0000011A 53                                      push rbx
   202 0000011B 51                                      push rcx
   203 0000011C 56                                      push rsi
   204                                  
   205 0000011D 50                                      push rax
   206 0000011E 52                                      push rdx
   207                                  
   208 0000011F 488B5C0D00                              mov rbx, [rbp + rcx]
   209 00000124 B910000000                              mov rcx, 16
   210 00000129 48BE-                                   mov rsi, tmpBuff
   210 0000012B [4600000000000000] 
   211 00000133 E83AFFFFFF                              call itoa
   212                                  
   213 00000138 5A                                      pop rdx
   214 00000139 58                                      pop rax
   215                                  
   216 0000013A 803E00                  .cycle:         cmp byte [rsi], 0
   217 0000013D 740D                                    je .return
   218                                  
   219 0000013F 488B16                                  mov rdx, [rsi]
   220 00000142 8810                                    mov byte [rax], dl
   221 00000144 48FFC0                                  inc rax
   222 00000147 48FFC6                                  inc rsi
   223                                  
   224 0000014A EBEE                                    jmp .cycle
   225                                  
   226 0000014C 5E                      .return:        pop rsi
   227 0000014D 59                                      pop rcx
   228 0000014E 5B                                      pop rbx
   229                                  
   230 0000014F 4883C302                                add rbx, 2
   231 00000153 4883C108                                add rcx, 8
   232                                  
   233 00000157 C3                                      ret
   234                                  
   235                                  
   236                                  ;--------------------------------------------
   237                                  ; This function stores %c value in the buffer
   238                                  ;
   239                                  ; Entry: RAX - buffer, RBP - stack base, RCX - shift in stack
   240                                  ; RBX - literal
   241                                  ;
   242                                  ; Destr: DX
   243                                  ;--------------------------------------------
   244                                  pc_hand:
   245 00000158 6631D2                                  xor dx, dx
   246 0000015B 488B540D00                              mov rdx, [rbp + rcx]
   247 00000160 8810                                    mov byte [rax], dl
   248 00000162 4883C302                                add rbx, 2
   249 00000166 48FFC0                                  inc rax
   250 00000169 4883C108                                add rcx, 8
   251                                  
   252 0000016D C3                                      ret
   253                                  
   254                                  
   255                                                  
   256                                  ;--------------------------------------------
   257                                  ; This function stores %s value in the buffer
   258                                  ;
   259                                  ; Entry: RAX - buffer, RBP - stack base, RCX - shift in stack
   260                                  ; RBX - literal
   261                                  ;
   262                                  ; Destr: DX
   263                                  ;--------------------------------------------
   264                                  ps_hand:
   265 0000016E 4831D2                                  xor rdx, rdx
   266                                  
   267 00000171 488B540D00                              mov rdx, [rbp + rcx]
   268 00000176 53                                      push rbx
   269                                  
   270 00000177 4831DB                  s_h:            xor rbx, rbx
   271                                  
   272 0000017A 803A00                                  cmp byte [rdx], 0
   273 0000017D 740E                                    je out
   274                                  
   275 0000017F 488B1A                                  mov rbx, [rdx]
   276 00000182 488918                                  mov [rax], rbx
   277                                  
   278 00000185 48FFC0                                  inc rax
   279 00000188 48FFC2                                  inc rdx
   280                                  
   281 0000018B EBEA                                    jmp s_h
   282                                  
   283 0000018D 4883C108                out:            add rcx, 8
   284 00000191 5B                                      pop rbx
   285                                  
   286 00000192 4883C302                                add rbx, 2
   287                                  
   288 00000196 C3                                      ret
   289                                  
   290                                  
   291                                  
   292                                  ;------------------------------------------------
   293                                  ; Copies the character string pointed to by src,
   294                                  ; including the null terminator, to the character
   295                                  ; array whose first element is pointed to by dest.
   296                                  ;
   297                                  ; The behavior is undefined if the	dest array is not
   298                                  ; large enough. The behavior is undefined if the strings overlap.
   299                                  ;
   300                                  ; Entry: RSI - addr	of the source string
   301                                  ;
   302                                  ; Exit:  RDI - addr	of dest	string
   303                                  ; Destr: BX, AX
   304                                  ;------------------------------------------------
   305                                  strcpy:
   306 00000197 E80FFFFFFF                              call StrLen	     ; calculating length of source string, CX
   307                                  
   308 0000019C F3A4                                    rep movsb
   309                                  
   310 0000019E C3                                      ret
