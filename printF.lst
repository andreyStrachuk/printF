     1                                  section .data
     2 00000000 25784920616D206865-     Msg:  db "%xI am here%s!dgdfgsdf %s %c", 0xA, 0
     2 00000009 726525732164676466-
     2 00000012 677364662025732025-
     2 0000001B 630A00             
     3                                  
     4 0000001E 736F6D657468696E67-     str:  db "something to print", 0
     4 00000027 20746F207072696E74-
     4 00000030 00                 
     5 00000031 736F6D657468696E67-     str1:  db "something to print 2", 0
     5 0000003A 20746F207072696E74-
     5 00000043 203200             
     6                                  
     7 00000046 00<rept>                tmpBuff  times 40 db 0
     8                                  
     9 0000006E 303132333435363738-     ConvertTable	db "0123456789ABCDEF"
     9 00000077 39414243444546     
    10                                  
    11 0000007E [5A01000000000000]      jmpTable        dq ord_h
    12 00000086 [2401000000000000]                      dq b_hand
    13 0000008E [0C01000000000000]                      dq c_hand
    14 00000096 [1301000000000000]                      dq d_hand
    15 0000009E [5A01000000000000]                      dq ord_h
    16 000000A6 [5A01000000000000]                      dq ord_h
    17 000000AE [5A01000000000000]                      dq ord_h
    18 000000B6 [5A01000000000000]                      dq ord_h
    19 000000BE [5A01000000000000]                      dq ord_h
    20 000000C6 [5A01000000000000]                      dq ord_h
    21 000000CE [5A01000000000000]                      dq ord_h
    22 000000D6 [5A01000000000000]                      dq ord_h
    23 000000DE [5A01000000000000]                      dq ord_h
    24 000000E6 [3501000000000000]                      dq o_hand
    25 000000EE [5A01000000000000]                      dq ord_h
    26 000000F6 [5A01000000000000]                      dq ord_h
    27 000000FE [CE01000000000000]                      dq s_h
    28 00000106 [5A01000000000000]                      dq ord_h
    29 0000010E [5A01000000000000]                      dq ord_h
    30 00000116 [5A01000000000000]                      dq ord_h
    31 0000011E [5A01000000000000]                      dq ord_h
    32 00000126 [4601000000000000]                      dq x_hand
    33 0000012E [5A01000000000000]                      dq ord_h
    34 00000136 [5A01000000000000]                      dq ord_h
    35 0000013E [5A01000000000000]                      dq ord_h
    36                                  
    37                                  
    38                                  section .bss
    39                                  
    40 00000000 <res 00001000>          buf     resb 4096
    41                                  
    42                                  section .text
    43                                  
    44                                  global _start
    45                                  
    46                                  _start:
    47 00000000 BF4C060000                      mov rdi, 1612
    48 00000005 48BE-                           mov rsi, str
    48 00000007 [1E00000000000000] 
    49 0000000F 48BA-                           mov rdx, str1
    49 00000011 [3100000000000000] 
    50 00000019 B957000000                      mov rcx, 'W'
    51                                  
    52 0000001E 4151                            push r9
    53 00000020 4150                            push r8
    54 00000022 51                              push rcx
    55 00000023 52                              push rdx
    56 00000024 56                              push rsi
    57 00000025 57                              push rdi
    58                                  
    59 00000026 48B8-                           mov rax, buf
    59 00000028 [0000000000000000] 
    60 00000030 48BB-                           mov rbx, Msg
    60 00000032 [0000000000000000] 
    61 0000003A E883000000                      call cpy
    62                                  
    63 0000003F 5F                              pop rdi
    64 00000040 5E                              pop rsi
    65 00000041 5A                              pop rdx
    66 00000042 59                              pop rcx
    67 00000043 4158                            pop r8
    68 00000045 4159                            pop r9
    69                                  
    70 00000047 48BE-                           mov rsi, buf
    70 00000049 [0000000000000000] 
    71 00000051 E855000000                      call StrLen
    72 00000056 89CA                            mov edx, ecx
    73                                  
    74 00000058 B804000000                      mov eax, 0x04
    75 0000005D BB01000000                      mov ebx, 1
    76 00000062 B9[00000000]                    mov ecx, buf
    77 00000067 CD80                            int 0x80
    78                                  
    79 00000069 B801000000                      mov eax, 0x01
    80 0000006E 31DB                            xor ebx, ebx
    81 00000070 CD80                            int 0x80
    82                                  
    83                                  
    84                                  ;--------------------------------------------
    85                                  ; Converts an integer value to a null-terminated string using
    86                                  ; the specified base and stores the result in the array given by str parameter.
    87                                  ;
    88                                  ; Entry: 	RSI - addr of the string
    89                                  ;			RBX - number
    90                                  ;			RCX - base of numeric system
    91                                  ;
    92                                  ; Exit:		RSI - addr of the string
    93                                  ;
    94                                  ; Destr:	RAX, RBX, RDX
    95                                  ;--------------------------------------------
    96                                  itoa:
    97 00000072 4889D8                              mov rax, rbx          
    98                                  
    99                                  .count:
   100 00000075 4831D2                              xor rdx, rdx
   101 00000078 48F7F1                              div rcx
   102                                  
   103 0000007B 4883F800                            cmp rax, 0
   104 0000007F 7405                                je .MainFunc
   105 00000081 48FFC6                              inc rsi
   106 00000084 EBEF                                jmp .count
   107                                  
   108                                  .MainFunc:
   109 00000086 4889D8                              mov rax, rbx
   110                                  
   111 00000089 C6460100                            mov byte [rsi + 1], 0
   112                                  
   113                                  .itoaloop:
   114 0000008D 4831D2                              xor rdx, rdx
   115 00000090 48F7F1                              div rcx
   116                                  
   117 00000093 4889D3                              mov rbx, rdx
   118 00000096 8A93[6E000000]                      mov dl, byte [rbx + ConvertTable]   
   119                                  
   120 0000009C 8816                                mov byte [rsi], dl     
   121 0000009E 48FFCE                              dec rsi
   122                                  
   123 000000A1 4883F800                            cmp rax, 0
   124 000000A5 75E6                                jne .itoaloop
   125                                  
   126 000000A7 48FFC6                              inc rsi
   127                                  
   128 000000AA C3                      	    ret
   129                                  
   130                                  ;---------------------------------
   131                                  ; This function calculates	the length of string which terminates by '\0' symbol
   132                                  ; Entry: RSI - addres of string
   133                                  ;
   134                                  ; Exit: RCX	- length
   135                                  ; Destr: RCX
   136                                  ;---------------------------------
   137                                  StrLen:
   138 000000AB 56                                      push rsi
   139 000000AC 4831C9                                  xor rcx, rcx
   140 000000AF 48FFC9                                  dec rcx
   141 000000B2 48FFCE                                  dec rsi
   142                                  
   143 000000B5 48FFC6                  .cycle_len:     inc rsi
   144 000000B8 48FFC1                                  inc rcx
   145                                  
   146 000000BB 803E00                                  cmp byte [rsi], 0
   147                                  
   148 000000BE 75F5                                    jne .cycle_len
   149                                  
   150 000000C0 5E                                      pop rsi
   151                                  
   152 000000C1 C3                                      ret
   153                                  
   154                                  
   155                                  ;-------------------------------------------------
   156                                  ; This function forms string which is to be printed
   157                                  ; 
   158                                  ; RBX - string literal, RAX - buffer to print
   159                                  ; 
   160                                  ; Destr: RCX, RDX
   161                                  ;-------------------------------------------------
   162                                  cpy:
   163 000000C2 55                                      push rbp
   164 000000C3 4889E5                                  mov rbp, rsp
   165                                  
   166 000000C6 4831C9                                  xor rcx, rcx
   167 000000C9 B910000000                              mov rcx, 16
   168                                  
   169 000000CE 4831D2                  cycle:          xor rdx, rdx
   170 000000D1 803B00                                  cmp byte [rbx], 0
   171 000000D4 0F8491000000                            je exit
   172                                  
   173 000000DA 803B25                                  cmp byte [rbx], '%'
   174 000000DD 7402                                    je p_hand
   175                                  
   176 000000DF 7579                                    jne ord_h       
   177                                  
   178 000000E1 807B0163                p_hand:         cmp byte [rbx + 1], 'c'
   179                                  
   180 000000E5 7425                                    je c_hand
   181                                  
   182 000000E7 807B0164                                cmp byte [rbx + 1], 'd'
   183                                  
   184 000000EB 7426                                    je d_hand
   185                                  
   186 000000ED 807B0162                                cmp byte [rbx + 1], 'b'
   187                                  
   188 000000F1 7431                                    je b_hand
   189                                  
   190 000000F3 807B016F                                cmp byte [rbx + 1], 'o'
   191                                  
   192 000000F7 743C                                    je o_hand
   193                                  
   194 000000F9 807B0178                                cmp byte [rbx + 1], 'x'
   195                                  
   196 000000FD 7447                                    je x_hand
   197                                  
   198 000000FF 807B0173                                cmp byte [rbx + 1], 's'
   199 00000103 7555                                    jne ord_h
   200                                  
   201 00000105 E8BB000000                              call ps_hand
   202                                  
   203 0000010A EBC2                                    jmp cycle
   204                                  
   205                                  
   206 0000010C E89E000000              c_hand:         call pc_hand
   207                                  
   208 00000111 EBBB                                    jmp cycle
   209                                  
   210 00000113 4152                    d_hand:         push r10
   211 00000115 41BA0A000000                            mov r10, 10
   212 0000011B E850000000                              call number_hand
   213 00000120 415A                                    pop r10
   214                                  
   215 00000122 EBAA                                    jmp cycle
   216                                  
   217 00000124 4152                    b_hand:         push r10
   218 00000126 41BA02000000                            mov r10, 2
   219 0000012C E83F000000                              call number_hand
   220 00000131 415A                                    pop r10
   221                                  
   222 00000133 EB99                                    jmp cycle
   223                                  
   224 00000135 4152                    o_hand:         push r10
   225 00000137 41BA08000000                            mov r10, 8
   226 0000013D E82E000000                              call number_hand
   227 00000142 415A                                    pop r10
   228                                  
   229 00000144 EB88                                    jmp cycle
   230                                  
   231 00000146 4152                    x_hand:         push r10
   232 00000148 41BA10000000                            mov r10, 16
   233 0000014E E81D000000                              call number_hand
   234 00000153 415A                                    pop r10
   235                                  
   236 00000155 E974FFFFFF                              jmp cycle
   237                                  
   238 0000015A 488B13                  ord_h:          mov rdx, [rbx]
   239 0000015D 488910                                  mov [rax], rdx
   240                                  
   241 00000160 48FFC0                                  inc rax
   242 00000163 48FFC3                                  inc rbx
   243                                  
   244 00000166 E963FFFFFF                              jmp cycle
   245                                  
   246                                  exit:
   247 0000016B C60300                                  mov byte [rbx], 0
   248                                  
   249 0000016E 5D                                      pop rbp
   250                                  
   251 0000016F C3                                      ret
   252                                  
   253                                  ;--------------------------------------------
   254                                  ; This function stores %d value in the buffer
   255                                  ;
   256                                  ; Entry: RAX - buffer, RBP - stack base, RCX - shift in stack
   257                                  ; RBX - literal, 
   258                                  ;
   259                                  ; Destr: DX
   260                                  ;--------------------------------------------
   261                                  number_hand:
   262 00000170 4831D2                                  xor rdx, rdx
   263                                  
   264 00000173 53                                      push rbx
   265 00000174 51                                      push rcx
   266 00000175 56                                      push rsi
   267                                  
   268 00000176 50                                      push rax
   269 00000177 52                                      push rdx
   270                                  
   271 00000178 488B5C0D00                              mov rbx, [rbp + rcx]
   272 0000017D 4C89D1                                  mov rcx, r10
   273 00000180 48BE-                                   mov rsi, tmpBuff
   273 00000182 [4600000000000000] 
   274 0000018A E8E3FEFFFF                              call itoa
   275                                  
   276 0000018F 5A                                      pop rdx
   277 00000190 58                                      pop rax
   278                                  
   279 00000191 803E00                  .cycle:         cmp byte [rsi], 0
   280 00000194 740D                                    je .return
   281                                  
   282 00000196 488B16                                  mov rdx, [rsi]
   283 00000199 8810                                    mov byte [rax], dl
   284 0000019B 48FFC0                                  inc rax
   285 0000019E 48FFC6                                  inc rsi
   286                                  
   287 000001A1 EBEE                                    jmp .cycle
   288                                  
   289 000001A3 5E                      .return:        pop rsi
   290 000001A4 59                                      pop rcx
   291 000001A5 5B                                      pop rbx
   292                                  
   293 000001A6 4883C302                                add rbx, 2
   294 000001AA 4883C108                                add rcx, 8
   295                                  
   296 000001AE C3                                      ret
   297                                  
   298                                  
   299                                  ;--------------------------------------------
   300                                  ; This function stores %c value in the buffer
   301                                  ;
   302                                  ; Entry: RAX - buffer, RBP - stack base, RCX - shift in stack
   303                                  ; RBX - literal
   304                                  ;
   305                                  ; Destr: DX
   306                                  ;--------------------------------------------
   307                                  pc_hand:
   308 000001AF 6631D2                                  xor dx, dx
   309 000001B2 488B540D00                              mov rdx, [rbp + rcx]
   310 000001B7 8810                                    mov byte [rax], dl
   311 000001B9 4883C302                                add rbx, 2
   312 000001BD 48FFC0                                  inc rax
   313 000001C0 4883C108                                add rcx, 8
   314                                  
   315 000001C4 C3                                      ret
   316                                  
   317                                  
   318                                                  
   319                                  ;--------------------------------------------
   320                                  ; This function stores %s value in the buffer
   321                                  ;
   322                                  ; Entry: RAX - buffer, RBP - stack base, RCX - shift in stack
   323                                  ; RBX - literal
   324                                  ;
   325                                  ; Destr: DX
   326                                  ;--------------------------------------------
   327                                  ps_hand:
   328 000001C5 4831D2                                  xor rdx, rdx
   329                                  
   330 000001C8 488B540D00                              mov rdx, [rbp + rcx]
   331 000001CD 53                                      push rbx
   332                                  
   333 000001CE 4831DB                  s_h:            xor rbx, rbx
   334                                  
   335 000001D1 803A00                                  cmp byte [rdx], 0
   336 000001D4 740E                                    je out
   337                                  
   338 000001D6 488B1A                                  mov rbx, [rdx]
   339 000001D9 488918                                  mov [rax], rbx
   340                                  
   341 000001DC 48FFC0                                  inc rax
   342 000001DF 48FFC2                                  inc rdx
   343                                  
   344 000001E2 EBEA                                    jmp s_h
   345                                  
   346 000001E4 4883C108                out:            add rcx, 8
   347 000001E8 5B                                      pop rbx
   348                                  
   349 000001E9 4883C302                                add rbx, 2
   350                                  
   351 000001ED C3                                      ret
   352                                  
   353                                  
   354                                  
   355                                  ;------------------------------------------------
   356                                  ; Copies the character string pointed to by src,
   357                                  ; including the null terminator, to the character
   358                                  ; array whose first element is pointed to by dest.
   359                                  ;
   360                                  ; The behavior is undefined if the	dest array is not
   361                                  ; large enough. The behavior is undefined if the strings overlap.
   362                                  ;
   363                                  ; Entry: RSI - addr	of the source string
   364                                  ;
   365                                  ; Exit:  RDI - addr	of dest	string
   366                                  ; Destr: BX, AX
   367                                  ;------------------------------------------------
   368                                  strcpy:
   369 000001EE E8B8FEFFFF                              call StrLen	     ; calculating length of source string, CX
   370                                  
   371 000001F3 F3A4                                    rep movsb
   372                                  
   373 000001F5 C3                                      ret
